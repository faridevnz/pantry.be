// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum QuantityType {
  MG // milligrams
  PZ // pieces
  ML // millilitres
}

enum RecipeDifficulty {
  F
  D
  M
}

// models
model FoodCategory {
  id    String @id @unique @default(uuid())
  // fileds
  name  String @unique
  // relations
  Foods Food[]
}

model RecipeCategory {
  id      String   @id @unique @default(uuid())
  // fields
  name    String   @unique
  // relations
  Recipes Recipe[]
}

model Food {
  id             String        @id @unique @default(uuid())
  // fields
  name           String
  icon           String
  expiration     String?
  quantity_type  QuantityType
  quantity_value Int
  // TODO: add nutritional values
  carbohydrate   Int // gr
  protein        Int // gr
  fat            Int // gr
  // relations
  food_category  FoodCategory  @relation(fields: [foodCategory], references: [id])
  foodCategory   String
  Recipe_Food    Recipe_Food[]
}

model Recipe {
  id               String           @id @unique @default(uuid())
  // fields
  name             String
  description      String?
  process          String?
  difficulty       RecipeDifficulty
  time             Int // in minutes
  // relations
  Recipe_Food      Recipe_Food[]
  RecipeCategory   RecipeCategory?  @relation(fields: [recipeCategoryId], references: [id])
  recipeCategoryId String?
}

// n to n ( Recipe_Food )
model Recipe_Food {
  id       String @id @unique @default(uuid())
  // fields
  quantity Int // gr
  // relations
  food     Food   @relation(fields: [foodId], references: [id])
  foodId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  @@unique([foodId, recipeId])
}
